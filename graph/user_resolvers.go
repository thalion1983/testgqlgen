package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"testgqlgen/graph/generated"
	"testgqlgen/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	*r.MaxID = *r.MaxID + 1
	newUser := &model.User{
		ID:   *r.MaxID,
		Name: input.Name,
		Age:  input.Age,
	}
	r.UserList = append(r.UserList, newUser)
	return newUser, nil
}

// RemoveUser is the resolver for the removeUser field.
func (r *mutationResolver) RemoveUser(ctx context.Context, id int) (*model.User, error) {
	for u, user := range r.UserList {
		if user.ID == id {
			r.UserList = append(r.UserList[:u], r.UserList[u+1:]...)
			return user, nil
		}
	}
	return nil, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	if len(r.UserList) == 0 {
		return nil, nil
	}
	return r.UserList, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
